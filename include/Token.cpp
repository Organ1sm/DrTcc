//
// Created by yw
//

#include "Token.h"

namespace DrTcc
{


    std::string LexerTypeList[] = {
            "none",
            "ptr",
            "error",
            "char",
            "uchar",
            "short",
            "ushort",
            "int",
            "uint",
            "long",
            "ulong",
            "float",
            "double",
            "operator",
            "keyword",
            "identifier",
            "string",
            "comment",
            "space",
            "newline",
            "END"
    };

    std::tuple<TokenType, std::string> KeywordStringList[] = {
            std::make_tuple(TokenType::KStart, "@START"),
            std::make_tuple(TokenType::K_auto, "auto"),
            std::make_tuple(TokenType::K_bool, "bool"),
            std::make_tuple(TokenType::K_break, "break"),
            std::make_tuple(TokenType::K_case, "case"),
            std::make_tuple(TokenType::K_char, "char"),
            std::make_tuple(TokenType::K_const, "const"),
            std::make_tuple(TokenType::K_continue, "continue"),
            std::make_tuple(TokenType::K_default, "default"),
            std::make_tuple(TokenType::K_do, "do"),
            std::make_tuple(TokenType::K_double, "double"),
            std::make_tuple(TokenType::K_else, "else"),
            std::make_tuple(TokenType::K_enum, "enum"),
            std::make_tuple(TokenType::K_extern, "extern"),
            std::make_tuple(TokenType::K_false, "false"),
            std::make_tuple(TokenType::K_float, "float"),
            std::make_tuple(TokenType::K_for, "for"),
            std::make_tuple(TokenType::K_goto, "goto"),
            std::make_tuple(TokenType::K_if, "if"),
            std::make_tuple(TokenType::K_int, "int"),
            std::make_tuple(TokenType::K_long, "long"),
            std::make_tuple(TokenType::K_register, "register"),
            std::make_tuple(TokenType::K_return, "return"),
            std::make_tuple(TokenType::K_short, "short"),
            std::make_tuple(TokenType::K_signed, "signed"),
            std::make_tuple(TokenType::K_sizeof, "sizeof"),
            std::make_tuple(TokenType::K_static, "static"),
            std::make_tuple(TokenType::K_struct, "struct"),
            std::make_tuple(TokenType::K_switch, "switch"),
            std::make_tuple(TokenType::K_true, "true"),
            std::make_tuple(TokenType::K_typedef, "typedef"),
            std::make_tuple(TokenType::K_union, "union"),
            std::make_tuple(TokenType::K_unsigned, "unsigned"),
            std::make_tuple(TokenType::K_void, "void"),
            std::make_tuple(TokenType::K_volatile, "volatile"),
            std::make_tuple(TokenType::K_while, "while"),
            std::make_tuple(TokenType::K_interrupt, "interrupt"),
            std::make_tuple(TokenType::K_pragma, "pragma"),
            std::make_tuple(TokenType::KEnd, "@END")
    };

    // <OperatorType, operator, opStr, instruct, priority>
    std::tuple<OperatorType, std::string, std::string, Instrucitons, int> OperatorStringList[] = {
            std::make_tuple(OperatorType::OpStart, "@START", "@START", NOP, 9999),
            std::make_tuple(OperatorType::Assign, "=", "assign", NOP, 1401),
            std::make_tuple(OperatorType::Equal, "==", "equal", EQ, 701),
            std::make_tuple(OperatorType::Add, "+", "plus", ADD, 401),
            std::make_tuple(OperatorType::AddAssign, "+=", "plus_assign", ADD, 1405),
            std::make_tuple(OperatorType::Minus, "-", "minus", SUB, 402),
            std::make_tuple(OperatorType::MinusAssign, "-=", "minus_assign", SUB, 1406),
            std::make_tuple(OperatorType::Mul, "*", "times", MUL, 302),
            std::make_tuple(OperatorType::MulAssign, "*=", "times_assign", MUL, 1403),
            std::make_tuple(OperatorType::Divide, "/", "divide", DIV, 301),
            std::make_tuple(OperatorType::DivAssign, "/=", "div_assign", DIV, 1402),
            std::make_tuple(OperatorType::BitAnd, "&", "bit_and", AND, 801),
            std::make_tuple(OperatorType::AndAssign, "&=", "and_assign", AND, 1409),
            std::make_tuple(OperatorType::BitOr, "|", "bit_or", OR, 1001),
            std::make_tuple(OperatorType::OrAssign, "|=", "or_assign", OR, 1411),
            std::make_tuple(OperatorType::BitXor, "^", "bit_xor", XOR, 901),
            std::make_tuple(OperatorType::XorAssign, "^=", "xor_assign", XOR, 1410),
            std::make_tuple(OperatorType::Mod, "%", "mod", MOD, 303),
            std::make_tuple(OperatorType::ModAssign, "%=", "mod_assign", MOD, 1404),
            std::make_tuple(OperatorType::LessThan, "<", "less_than", LT, 603),
            std::make_tuple(OperatorType::LessThanOrEqual, "<=", "less_than_or_equal", LE, 604),
            std::make_tuple(OperatorType::GreaterThan, ">", "greater_than", GT, 601),
            std::make_tuple(OperatorType::GreaterThanOrEqual, ">=", "greater_than_or_equal", GE, 602),
            std::make_tuple(OperatorType::LogicalNot, "!", "logical_not", NOP, 207),
            std::make_tuple(OperatorType::NotEqual, "!=", "not_equal", NE, 702),
            std::make_tuple(OperatorType::Escape, "\\", "escape", NOP, 9000),
            std::make_tuple(OperatorType::Query, "?", "query", NOP, 1301),
            std::make_tuple(OperatorType::BitNot, "~", "bit_not", NOP, 208),
            std::make_tuple(OperatorType::Lparan, "(", "lparan", NOP, 102),
            std::make_tuple(OperatorType::Rparan, ")", "rparan", NOP, 102),
            std::make_tuple(OperatorType::Lbrace, "{", "lbrace", NOP, 9000),
            std::make_tuple(OperatorType::Rbrace, "}", "rbrace", NOP, 9000),
            std::make_tuple(OperatorType::Lsquare, "[", "lsquare", NOP, 101),
            std::make_tuple(OperatorType::Rsquare, "]", "rsquare", NOP, 101),
            std::make_tuple(OperatorType::Comma, ",", "comma", NOP, 1501),
            std::make_tuple(OperatorType::Dot, ".", "dot", NOP, 103),
            std::make_tuple(OperatorType::Semi, ";", "semi", NOP, 9000),
            std::make_tuple(OperatorType::Colon, ":", "colon", NOP, 1302),
            std::make_tuple(OperatorType::Inc, "++", "plus_plus", ADD, 203),
            std::make_tuple(OperatorType::Dec, "--", "minus_minus", SUB, 204),
            std::make_tuple(OperatorType::LogicalAnd, "&&", "logical_and", JZ, 1101),
            std::make_tuple(OperatorType::LogicalOr, "||", "logical_or", JNZ, 1201),
            std::make_tuple(OperatorType::Pointer, "->", "pointer", NOP, 104),
            std::make_tuple(OperatorType::LeftShift, "<<", "left_shift", SHL, 501),
            std::make_tuple(OperatorType::RightShift, ">>", "right_shift", SHR, 502),
            std::make_tuple(OperatorType::LeftShiftAssign, "<<=", "left_shift_assign", SHL, 1407),
            std::make_tuple(OperatorType::RightShiftAssign, ">>=", "right_shift_assign", SHR, 1408),
            std::make_tuple(OperatorType::Ellipsis, "...", "ellipsis", NOP, 9000),
            std::make_tuple(OperatorType::OpEnd, "@END", "@END", NOP, 9999),
    };

    std::tuple<AstNodeType, std::string> AstNodeTypeStringList[] = {
            std::make_tuple(AstNodeType::AstRoot, "AstRoot"),
            std::make_tuple(AstNodeType::AstEnum, "AstEnum"),
            std::make_tuple(AstNodeType::AstEnumUnit, "AstEnumUnit"),
            std::make_tuple(AstNodeType::AstVarGlobal, "AstVarGlobal"),
            std::make_tuple(AstNodeType::AstVarParam, "AstVarParam"),
            std::make_tuple(AstNodeType::AstVarLocal, "AstVarLocal"),
            std::make_tuple(AstNodeType::AstFunc, "AstFunc"),
            std::make_tuple(AstNodeType::AstParam, "AstParam"),
            std::make_tuple(AstNodeType::AstBlock, "AstBlock"),
            std::make_tuple(AstNodeType::AstExp, "AstExp"),
            std::make_tuple(AstNodeType::AstExpParam, "AstExpParam"),
            std::make_tuple(AstNodeType::AstStmt, "AstStmt"),
            std::make_tuple(AstNodeType::AstReturn, "AstReturn"),
            std::make_tuple(AstNodeType::AstSinOp, "AstSinOp"),
            std::make_tuple(AstNodeType::AstBinOp, "AstBinOp"),
            std::make_tuple(AstNodeType::AstTriOp, "AstTriOp"),
            std::make_tuple(AstNodeType::AstIf, "AstIf"),
            std::make_tuple(AstNodeType::AstWhile, "AstWhile"),
            std::make_tuple(AstNodeType::AstInvoke, "AstInvoke"),
            std::make_tuple(AstNodeType::AstEmpty, "AstEmpty"),
            std::make_tuple(AstNodeType::AstId, "AstId"),
            std::make_tuple(AstNodeType::AstType, "AstType"),
            std::make_tuple(AstNodeType::AstCast, "AstCast"),
            std::make_tuple(AstNodeType::AstString, "AstString"),
            std::make_tuple(AstNodeType::AstChar, "AstChar"),
            std::make_tuple(AstNodeType::AstUchar, "AstUchar"),
            std::make_tuple(AstNodeType::AstShort, "AstShort"),
            std::make_tuple(AstNodeType::AstUshort, "AstUshort"),
            std::make_tuple(AstNodeType::AstInt, "AstInt"),
            std::make_tuple(AstNodeType::AstUint, "AstUint"),
            std::make_tuple(AstNodeType::AstLong, "AstLong"),
            std::make_tuple(AstNodeType::AstUlong, "AstUlong"),
            std::make_tuple(AstNodeType::AstFloat, "AstFloat"),
            std::make_tuple(AstNodeType::AstDouble, "AstDouble")
    };

    std::string ErrStringList[] = {
            "@START", "#E !char!", "#E !operator!", "#E !comment!", "#E !digit!", "#E !string!", "@END",
    };

}
